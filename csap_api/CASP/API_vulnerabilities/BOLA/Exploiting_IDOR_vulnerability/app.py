import os, psycopg2
import flask
from flask import jsonify, request
from werkzeug.routing import BaseConverter
from CASP import app

class RegexConverter(BaseConverter):
    def __init__(self, url_map, *items):
        super(RegexConverter, self).__init__(url_map)
        self.regex = items[0]

def getConnection():
    conn = psycopg2.connect(host='localhost',
                            database='casp',
                            user=os.environ['DB_USERNAME'],
                            password=os.environ['DB_PASSWORD'])
    return conn
    

app.url_map.converters['regex'] = RegexConverter

# Get a user details
@app.route('/v1/user/<regex("[0-9]"):userId>')
def process_user(userId):
    """Get a particular user information
    ---
    produces:
    - "application/json"
    responses:
      200:
        description: "Success"
      400:
        description: "Invalid ID supplied"
      404:
        description: "todo item not found"
    """  
    authorization = request.headers.get('Authorization')
    conn = getConnection()
    cur = conn.cursor()
    cur.execute(f'SELECT * FROM users where id={userId};')
    user = cur.fetchall()
    cur.close()
    conn.close()
    try:
        if(user[0][5] == authorization):
            userData = {}
            userData["name"] = user[0][1]
            userData["email"] = user[0][2]
            userData["role"] = user[0][4]
            userData["key"] = user[0][5]
        else:
            return flask.abort(403)
    except IndexError:
        userData = {'Error':'User not found'}
    return jsonify(userData)

# Get all user details
@app.route('/v1/user/all')
def allUsers():
    """Returns all users information
    ---
    produces:
    - "application/json"
    responses:
      200:
        description: "users list"
      400:
        description: "Invalid ID supplied"
      404:
        description: "todo item not found"
    """  
    authorization = request.headers.get('authorization')
    conn = getConnection()
    cur = conn.cursor()
    cur.execute('SELECT * FROM users;')
    user = cur.fetchall();
    print(user[0][5])
    print(authorization)
    if(user[0][5] == authorization):
        cur.execute('SELECT * FROM users;')
    else:
        return flask.abort(403)
    users = cur.fetchall()
    cur.close()
    conn.close()
    responseData = []
    try:
        for i in range(len(users)):
            data = {}
            data["id"] = users[i][0]
            data["name"] = users[i][1]
            data["email"] = users[i][2]
            data["role"] = users[i][4]
            responseData.append(data)
    except IndexError:
            responseData["Error"] = "User not found"
    return jsonify(responseData)

# Delete user [IDOR where low level user can delete admin]
@app.route('/v1/user/delete/<regex("[0-9]"):userId>', methods=["DELETE"])
def removeuser(userId):
    """Delete a particular user
    ---
    produces:
    - "application/json"
    responses:
      200:
        description: "User has been deleted"
      400:
        description: "Invalid ID supplied"
      404:
        description: "todo item not found"
    """  
    conn = getConnection()
    cur = conn.cursor()
    cur.execute(f'DELETE FROM users WHERE id ={userId}')
    cur.execute(f'SELECT * FROM users;')
    user = cur.fetchall()
    conn.commit()
    cur.close()
    conn.close()
    return jsonify(Message="User has been deleted.")



#Sensitive information leakage - SQL Query leakage using Index Out of Range
@app.route('/v1/addproduct', methods=["POST"])
def new_product():
    """Add new product
    ---
    produces:
    - "application/json"
    responses:
      200:
        description: "list of tasks"
      400:
        description: "Invalid ID supplied"
      404:
        description: "todo item not found"
    """ 
    id = request.args.get('product_id')
    name = request.args.get('product_name')
    price = request.args.get('price')
    conn = getConnection()
    cur = conn.cursor()
    cur.execute('INSERT INTO products (product_name, price) VALUES (%s, %s, %s)',(id,name))
    cur.close()
    conn.close()
    return 'Product added'


@app.route('/getproduct', methods=['GET'])
def get_product():
    """Get a product information
    ---
    produces:
    - "application/json"
    responses:
      200:
        description: "success"
      400:
        description: "Invalid ID supplied"
      404:
        description: "todo item not found"
    """ 
    product = request.json
    print(product)
    id = product["id"]
    for i in dbcoll.find():
        print(i)
    items = dbcoll.find_one()
    return items